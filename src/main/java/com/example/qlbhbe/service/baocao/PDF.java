package com.example.qlbhbe.service.baocao;

import com.example.qlbhbe.dto.SanPhamDTO;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ResourceUtils;

import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
@Service
public class PDF {
    private static String FILE = "D:/FirstPdf.pdf";
    private static Font catFont;

    @Autowired
    SanPhamReport sanPhamReport;

    static {
        try {
            catFont = new Font(BaseFont.createFont(ResourceUtils.getFile("classpath:templates/arial.ttf").getAbsolutePath()
                    , BaseFont.IDENTITY_H, BaseFont.EMBEDDED), 18,
                    Font.BOLD);
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static Font redFont;

    static {
        try {
            redFont = new Font(BaseFont.createFont(ResourceUtils.getFile("classpath:templates/arial.ttf").getAbsolutePath()
                    , BaseFont.IDENTITY_H, BaseFont.EMBEDDED), 12,
                    Font.NORMAL, BaseColor.RED);
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static Font subFont;

    static {
        try {
            subFont = new Font(BaseFont.createFont(ResourceUtils.getFile("classpath:templates/arial.ttf").getAbsolutePath()
                    , BaseFont.IDENTITY_H, BaseFont.EMBEDDED), 16,
                    Font.BOLD);
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static Font smallBold;

    static {
        try {
            smallBold = new Font(BaseFont.createFont(ResourceUtils.getFile("classpath:templates/arial.ttf").getAbsolutePath()
                    , BaseFont.IDENTITY_H, BaseFont.EMBEDDED), 12,
                    Font.BOLD);
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static Font small;

    static {
        try {
            small = new Font(BaseFont.createFont(ResourceUtils.getFile("classpath:templates/arial.ttf").getAbsolutePath()
                    , BaseFont.IDENTITY_H, BaseFont.EMBEDDED), 10,
                    Font.BOLD);
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private static Font smallContent;

    static {
        try {
            smallContent = new Font(BaseFont.createFont(ResourceUtils.getFile("classpath:templates/arial.ttf").getAbsolutePath()
                    , BaseFont.IDENTITY_H, BaseFont.EMBEDDED), 10,
                    Font.NORMAL);
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public Map<String, String> exportSanPhamTonPDF(SanPhamDTO sanPhamDTO) throws Exception {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document);
            document.close();
            return null;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

    private void setRow(Paragraph preface, String content, Font font, int style) {
        Paragraph tmp = new Paragraph(content, font);
        tmp.setAlignment(style);
        preface.add(tmp);
    }

    private void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        setRow(preface, "Báo cáo tồn kho", catFont, Element.ALIGN_CENTER);

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        setRow(preface, "Hà Nội, ngày " + LocalDate.now().getDayOfMonth() + ", tháng " + LocalDate.now().getMonthValue() + ", năm " + LocalDate.now().getYear(), smallBold, Element.ALIGN_RIGHT);
        addEmptyLine(preface, 2);

        document.add(preface);
    }

    private void addContent(Document document) throws Exception {
        Paragraph paragraph = new Paragraph();
        // add a table
        createTable(paragraph);

        addEmptyLine(paragraph, 2);

        setRow(paragraph, "Giám đốc", smallBold, Element.ALIGN_RIGHT);

        // now add all this to the document
        document.add(paragraph);


    }

    private void createTable(Paragraph paragraph)
            throws Exception {
        PdfPTable table = new PdfPTable(7);
        PdfPCell c1 = null;
        setHeaderTable(table, "Mã sản phẩm", Element.ALIGN_CENTER, c1);
        setHeaderTable(table, "Tên Sản Phẩm", Element.ALIGN_CENTER, c1);
        setHeaderTable(table, "Giá Bán Niêm Yết", Element.ALIGN_CENTER, c1);
        setHeaderTable(table, "Giá Nhập Niêm Yết", Element.ALIGN_CENTER, c1);
        setHeaderTable(table, "Đơn vị", Element.ALIGN_CENTER, c1);
        setHeaderTable(table, "Số Lượng Tồn", Element.ALIGN_CENTER, c1);
        setHeaderTable(table, "Cửa Hàng", Element.ALIGN_CENTER, c1);
        table.setHeaderRows(1);
        List<SanPhamDTO> sanPhamDTOList = sanPhamReport.getSanPhamTon(new SanPhamDTO());
        for (SanPhamDTO sanPhamDTO1 : sanPhamDTOList) {
            setContentTable(table,sanPhamDTO1.getMaSanPham(), Element.ALIGN_CENTER, c1);
            setContentTable(table,sanPhamDTO1.getTenSanPham(), Element.ALIGN_CENTER, c1);
            setContentTable(table,sanPhamDTO1.getGiaBanNiemYet().toString(), Element.ALIGN_CENTER, c1);
            setContentTable(table,sanPhamDTO1.getGiaNhapNiemYet().toString(), Element.ALIGN_CENTER, c1);
            setContentTable(table,sanPhamDTO1.getDonVi(), Element.ALIGN_CENTER, c1);
            setContentTable(table,sanPhamDTO1.getSoLuongTon().toString(), Element.ALIGN_CENTER, c1);
            setContentTable(table,sanPhamDTO1.getTenCuaHang(), Element.ALIGN_CENTER, c1);
        }
        paragraph.add(table);
    }

    private void setHeaderTable(PdfPTable table, String name, int style, PdfPCell c1) {
        c1 = new PdfPCell(new Phrase(name,small));
        c1.setHorizontalAlignment(style);
        table.addCell(c1);
    }
    private void setContentTable(PdfPTable table, String name, int style, PdfPCell c1) {
        c1 = new PdfPCell(new Phrase(name,smallContent));
        c1.setHorizontalAlignment(style);
        table.addCell(c1);
    }


    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
